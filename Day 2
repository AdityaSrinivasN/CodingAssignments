/* Add one to number */
def addOneToNumberHelper(arr, n, i, carry):

    # base case
    if (i == n):
        if (carry != 0):
            arr.append(carry)

        return

    d = arr[i] + carry
    arr[i] = d % 10
    carry = d // 10

    addOneToNumberHelper(arr, n, i + 1, carry)


def addOneToNumber(arr):

    # reverse the given array
    arr.reverse()

    # remove leading zeros
    while (len(arr) > 1 and arr[-1] == 0):
        arr.pop()

    n = len(arr)

    addOneToNumberHelper(arr, n, 0, 1)

    # reverse the array
    arr.reverse()

    return arr

/*Intersection of linked list*/

ListNode* Solution::getIntersectionNode(ListNode* A, ListNode* B) {
    if(A==NULL||B==NULL){
        return NULL;
    }
    ListNode* a = A;
    ListNode* b = B;
    while(a!=b){
        a = a==NULL?B:a->next;
        b = b==NULL?A:b->next;
    }
    return a;
}

